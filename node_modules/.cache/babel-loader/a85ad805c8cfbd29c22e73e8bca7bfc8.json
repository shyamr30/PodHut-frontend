{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\pipar\\\\Videos\\\\project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import{useCallback,useEffect,useRef,useState}from\"react\";export var useStateWithCallback=function useStateWithCallback(initialState){var _useState=useState(initialState),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var cbRef=useRef();var updateState=useCallback(function(newState,cb){cbRef.current=cb;setState(function(prev){return typeof newState==='function'?newState(prev):newState;});},[]);useEffect(function(){if(cbRef.current){cbRef.current(state);cbRef.current=null;}},[state]);return[state,updateState];};","map":{"version":3,"sources":["C:/Users/pipar/Videos/project/frontend/src/hooks/useStateWithCallback.js"],"names":["useCallback","useEffect","useRef","useState","useStateWithCallback","initialState","state","setState","cbRef","updateState","newState","cb","current","prev"],"mappings":"uIAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,MAAjC,CAAyCC,QAAzC,KAAyD,OAAzD,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,YAAD,CAAkB,CAClD,cAA0BF,QAAQ,CAACE,YAAD,CAAlC,wCAAOC,KAAP,eAAcC,QAAd,eACA,GAAMC,CAAAA,KAAK,CAAGN,MAAM,EAApB,CACA,GAAMO,CAAAA,WAAW,CAAGT,WAAW,CAAC,SAACU,QAAD,CAAWC,EAAX,CAAkB,CAC9CH,KAAK,CAACI,OAAN,CAAgBD,EAAhB,CAEAJ,QAAQ,CAAC,SAACM,IAAD,CAAU,CACf,MAAO,OAAOH,CAAAA,QAAP,GAAoB,UAApB,CAAiCA,QAAQ,CAACG,IAAD,CAAzC,CAAkDH,QAAzD,CACH,CAFO,CAAR,CAGH,CAN8B,CAM7B,EAN6B,CAA/B,CAQAT,SAAS,CAAC,UAAM,CACZ,GAAGO,KAAK,CAACI,OAAT,CAAiB,CACbJ,KAAK,CAACI,OAAN,CAAcN,KAAd,EACAE,KAAK,CAACI,OAAN,CAAgB,IAAhB,CACH,CACJ,CALQ,CAKP,CAACN,KAAD,CALO,CAAT,CAMA,MAAO,CAACA,KAAD,CAAQG,WAAR,CAAP,CACH,CAlBM","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nexport const useStateWithCallback = (initialState) => {\r\n    const [state, setState] = useState(initialState);\r\n    const cbRef = useRef();\r\n    const updateState = useCallback((newState, cb) => {\r\n        cbRef.current = cb;\r\n\r\n        setState((prev) => {\r\n            return typeof newState === 'function' ? newState(prev) : newState;\r\n        })\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if(cbRef.current){\r\n            cbRef.current(state);\r\n            cbRef.current = null;\r\n        }\r\n    },[state]);\r\n    return [state, updateState];\r\n}"]},"metadata":{},"sourceType":"module"}