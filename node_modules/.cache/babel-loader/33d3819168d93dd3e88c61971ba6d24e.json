{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { useStateWithCallback } from \"./useStateWithCallback\";\nconst users = [{\n  id: 1,\n  name: 'aaloo'\n}, {\n  id: 2,\n  name: 'kaloo'\n}];\nexport const useWebRTC = (roomId, user) => {\n  _s();\n\n  const [clients, setClients] = useStateWithCallback(users);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const localMediaStream = useRef(null);\n\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n\n  const addNewClients = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]); //capture media\n\n  useEffect(() => {\n    const startCapture = async () => {\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    };\n\n    startCapture().then(() => {});\n  }, []);\n  return {\n    clients,\n    provideRef\n  };\n};\n\n_s(useWebRTC, \"9PpG9axBHvruFORqSAMV5/lg22c=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"sources":["E:/College Assignment/Sem 6/SDP Project/project/frontend/src/hooks/useWebRTC.js"],"names":["useCallback","useEffect","useRef","useStateWithCallback","users","id","name","useWebRTC","roomId","user","clients","setClients","audioElements","connections","localMediaStream","provideRef","instance","userId","current","addNewClients","newClient","cb","lookingFor","find","client","undefined","existingClients","startCapture","navigator","mediaDevices","getUserMedia","audio","then"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAEA,MAAMC,KAAK,GAAG,CACV;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE;AAFV,CADU,EAKR;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALQ,CAAd;AAWA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AAAA;;AACvC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,oBAAoB,CAACC,KAAD,CAAlD;AACA,QAAMQ,aAAa,GAAGV,MAAM,CAAC,EAAD,CAA5B;AACA,QAAMW,WAAW,GAAGX,MAAM,CAAC,EAAD,CAA1B;AACA,QAAMY,gBAAgB,GAAGZ,MAAM,CAAC,IAAD,CAA/B;;AAEA,QAAMa,UAAU,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACrCL,IAAAA,aAAa,CAACM,OAAd,CAAsBD,MAAtB,IAAgCD,QAAhC;AACH,GAFD;;AAIA,QAAMG,aAAa,GAAGnB,WAAW,CAAC,CAACoB,SAAD,EAAYC,EAAZ,KAAmB;AAC7C,UAAMC,UAAU,GAAGZ,OAAO,CAACa,IAAR,CAAcC,MAAD,IAAYA,MAAM,CAACnB,EAAP,KAAce,SAAS,CAACf,EAAjD,CAAnB;;AACA,QAAGiB,UAAU,KAAKG,SAAlB,EAA6B;AACzBd,MAAAA,UAAU,CAAEe,eAAD,IAAqB,CAAC,GAAGA,eAAJ,EAAqBN,SAArB,CAAtB,EAAuDC,EAAvD,CAAV;AACH;AACJ,GAL4B,EAM7B,CAACX,OAAD,EAASC,UAAT,CAN6B,CAAjC,CAVuC,CAkBvC;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM0B,YAAY,GAAG,YAAY;AAC7Bb,MAAAA,gBAAgB,CAACI,OAAjB,GAA2B,MAAMU,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACjEC,QAAAA,KAAK,EAAE;AAD0D,OAApC,CAAjC;AAGH,KAJD;;AAKAJ,IAAAA,YAAY,GAAGK,IAAf,CAAoB,MAAM,CAEzB,CAFD;AAGH,GATQ,EASN,EATM,CAAT;AAWA,SAAO;AAACtB,IAAAA,OAAD;AAAUK,IAAAA;AAAV,GAAP;AACH,CA/BM;;GAAMR,S;UACqBJ,oB","sourcesContent":["import { useCallback, useEffect, useRef } from \"react\";\r\nimport { useStateWithCallback } from \"./useStateWithCallback\";\r\n\r\nconst users = [\r\n    {\r\n        id: 1,\r\n        name: 'aaloo'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'kaloo'\r\n      },\r\n];\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n    const [clients, setClients] = useStateWithCallback(users);\r\n    const audioElements = useRef({});\r\n    const connections = useRef({});\r\n    const localMediaStream = useRef(null);\r\n\r\n    const provideRef = (instance, userId) => {\r\n        audioElements.current[userId] = instance;\r\n    };\r\n\r\n    const addNewClients = useCallback((newClient, cb) => {\r\n            const lookingFor = clients.find((client) => client.id === newClient.id);\r\n            if(lookingFor === undefined) {\r\n                setClients((existingClients) => [...existingClients, newClient], cb);\r\n            }\r\n        },\r\n        [clients,setClients],\r\n    );\r\n    //capture media\r\n    useEffect(() => {\r\n        const startCapture = async () => {\r\n            localMediaStream.current = await navigator.mediaDevices.getUserMedia({\r\n                audio: true\r\n            });\r\n        };\r\n        startCapture().then(() => {\r\n\r\n        });\r\n    }, []);\r\n\r\n    return {clients, provideRef};\r\n}"]},"metadata":{},"sourceType":"module"}