{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { useStateWithCallback } from \"./useStateWithCallback\";\nimport { socketInit } from '../socket/index';\nexport const useWebRTC = (roomId, user) => {\n  _s();\n\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const localMediaStream = useRef(null);\n  const socket = useRef(null);\n  useEffect(() => {\n    socket.current = socketInit();\n  }, []);\n\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n\n  const addNewClients = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]); //capture media\n\n  useEffect(() => {\n    const startCapture = async () => {\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    };\n\n    startCapture().then(() => {\n      addNewClients(user, () => {\n        const localElement = audioElements.current[user.id];\n\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        } //socket emit JOIN socket.io\n\n\n        socket.current.emit('join', {});\n      });\n    });\n  }, []);\n  return {\n    clients,\n    provideRef\n  };\n};\n\n_s(useWebRTC, \"37arHaUjzZSo953HCXZK3DQOEAk=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"sources":["E:/College Assignment/Sem 6/SDP Project/project/frontend/src/hooks/useWebRTC.js"],"names":["useCallback","useEffect","useRef","useStateWithCallback","socketInit","useWebRTC","roomId","user","clients","setClients","audioElements","connections","localMediaStream","socket","current","provideRef","instance","userId","addNewClients","newClient","cb","lookingFor","find","client","id","undefined","existingClients","startCapture","navigator","mediaDevices","getUserMedia","audio","then","localElement","volume","srcObject","emit"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AAAA;;AACvC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,oBAAoB,CAAC,EAAD,CAAlD;AACA,QAAMO,aAAa,GAAGR,MAAM,CAAC,EAAD,CAA5B;AACA,QAAMS,WAAW,GAAGT,MAAM,CAAC,EAAD,CAA1B;AACA,QAAMU,gBAAgB,GAAGV,MAAM,CAAC,IAAD,CAA/B;AACA,QAAMW,MAAM,GAAGX,MAAM,CAAC,IAAD,CAArB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,MAAM,CAACC,OAAP,GAAiBV,UAAU,EAA3B;AACH,GAFQ,EAEP,EAFO,CAAT;;AAIA,QAAMW,UAAU,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACrCP,IAAAA,aAAa,CAACI,OAAd,CAAsBG,MAAtB,IAAgCD,QAAhC;AACH,GAFD;;AAIA,QAAME,aAAa,GAAGlB,WAAW,CAAC,CAACmB,SAAD,EAAYC,EAAZ,KAAmB;AAC7C,UAAMC,UAAU,GAAGb,OAAO,CAACc,IAAR,CAAcC,MAAD,IAAYA,MAAM,CAACC,EAAP,KAAcL,SAAS,CAACK,EAAjD,CAAnB;;AACA,QAAGH,UAAU,KAAKI,SAAlB,EAA6B;AACzBhB,MAAAA,UAAU,CAAEiB,eAAD,IAAqB,CAAC,GAAGA,eAAJ,EAAqBP,SAArB,CAAtB,EAAuDC,EAAvD,CAAV;AACH;AACJ,GAL4B,EAM7B,CAACZ,OAAD,EAASC,UAAT,CAN6B,CAAjC,CAduC,CAsBvC;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM0B,YAAY,GAAG,YAAY;AAC7Bf,MAAAA,gBAAgB,CAACE,OAAjB,GAA2B,MAAMc,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACjEC,QAAAA,KAAK,EAAE;AAD0D,OAApC,CAAjC;AAGH,KAJD;;AAKAJ,IAAAA,YAAY,GAAGK,IAAf,CAAoB,MAAM;AACtBd,MAAAA,aAAa,CAACX,IAAD,EAAO,MAAM;AACtB,cAAM0B,YAAY,GAAGvB,aAAa,CAACI,OAAd,CAAsBP,IAAI,CAACiB,EAA3B,CAArB;;AACA,YAAGS,YAAH,EAAiB;AACbA,UAAAA,YAAY,CAACC,MAAb,GAAsB,CAAtB;AACAD,UAAAA,YAAY,CAACE,SAAb,GAAyBvB,gBAAgB,CAACE,OAA1C;AACH,SALqB,CAOtB;;;AACAD,QAAAA,MAAM,CAACC,OAAP,CAAesB,IAAf,CAAoB,MAApB,EAA4B,EAA5B;AACH,OATY,CAAb;AAUH,KAXD;AAYH,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,SAAO;AAAC5B,IAAAA,OAAD;AAAUO,IAAAA;AAAV,GAAP;AACH,CA5CM;;GAAMV,S;UACqBF,oB","sourcesContent":["import { useCallback, useEffect, useRef } from \"react\";\r\nimport { useStateWithCallback } from \"./useStateWithCallback\";\r\nimport {socketInit} from '../socket/index';\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n    const [clients, setClients] = useStateWithCallback([]);\r\n    const audioElements = useRef({});\r\n    const connections = useRef({});\r\n    const localMediaStream = useRef(null);\r\n    const socket = useRef(null);\r\n    useEffect(() => {\r\n        socket.current = socketInit();\r\n    },[])\r\n\r\n    const provideRef = (instance, userId) => {\r\n        audioElements.current[userId] = instance;\r\n    };\r\n\r\n    const addNewClients = useCallback((newClient, cb) => {\r\n            const lookingFor = clients.find((client) => client.id === newClient.id);\r\n            if(lookingFor === undefined) {\r\n                setClients((existingClients) => [...existingClients, newClient], cb);\r\n            }\r\n        },\r\n        [clients,setClients],\r\n    );\r\n    //capture media\r\n    useEffect(() => {\r\n        const startCapture = async () => {\r\n            localMediaStream.current = await navigator.mediaDevices.getUserMedia({\r\n                audio: true\r\n            });\r\n        };\r\n        startCapture().then(() => {\r\n            addNewClients(user, () => {\r\n                const localElement = audioElements.current[user.id];\r\n                if(localElement) {\r\n                    localElement.volume = 0;\r\n                    localElement.srcObject = localMediaStream.current;\r\n                }\r\n\r\n                //socket emit JOIN socket.io\r\n                socket.current.emit('join', {});\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    return {clients, provideRef};\r\n}"]},"metadata":{},"sourceType":"module"}