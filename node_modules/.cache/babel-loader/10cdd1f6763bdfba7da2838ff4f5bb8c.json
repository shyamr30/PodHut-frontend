{"ast":null,"code":"import _objectSpread from\"E:\\\\College Assignment\\\\Sem 6\\\\SDP Project\\\\project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import _asyncToGenerator from\"E:\\\\College Assignment\\\\Sem 6\\\\SDP Project\\\\project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _toConsumableArray from\"E:\\\\College Assignment\\\\Sem 6\\\\SDP Project\\\\project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";import _slicedToArray from\"E:\\\\College Assignment\\\\Sem 6\\\\SDP Project\\\\project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"E:\\\\College Assignment\\\\Sem 6\\\\SDP Project\\\\project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{useEffect,useState,useRef,useCallback}from'react';import{ACTIONS}from'../actions';import socketInit from'../socket';import freeice from'freeice';import{useStateWithCallback}from'./useStateWithCallback';export var useWebRTC=function useWebRTC(roomId,user){var _useStateWithCallback=useStateWithCallback([]),_useStateWithCallback2=_slicedToArray(_useStateWithCallback,2),clients=_useStateWithCallback2[0],setClients=_useStateWithCallback2[1];var audioElements=useRef({});var connections=useRef({});var socket=useRef(null);var localMediaStream=useRef(null);var clientsRef=useRef(null);var addNewClient=useCallback(function(newClient,cb){var lookingFor=clients.find(function(client){return client.id===newClient.id;});if(lookingFor===undefined){setClients(function(existingClients){return[].concat(_toConsumableArray(existingClients),[newClient]);},cb);}},[clients,setClients]);useEffect(function(){clientsRef.current=clients;},[clients]);useEffect(function(){var initChat=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(){var captureMedia,_captureMedia,handleNewPeer,_handleNewPeer,handleRemovePeer,_handleRemovePeer,handleIceCandidate,_handleIceCandidate,setRemoteMedia,_setRemoteMedia,handleSetMute,_handleSetMute;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_handleSetMute=function _handleSetMute3(){_handleSetMute=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(mute,userId){var clientIdx,allConnectedClients;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:clientIdx=clientsRef.current.map(function(client){return client.id;}).indexOf(userId);allConnectedClients=JSON.parse(JSON.stringify(clientsRef.current));if(clientIdx>-1){allConnectedClients[clientIdx].muted=mute;setClients(allConnectedClients);}case 3:case\"end\":return _context6.stop();}}},_callee6);}));return _handleSetMute.apply(this,arguments);};handleSetMute=function _handleSetMute2(_x5,_x6){return _handleSetMute.apply(this,arguments);};_setRemoteMedia=function _setRemoteMedia3(){_setRemoteMedia=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref8){var peerId,remoteSessionDescription,connection,answer;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:peerId=_ref8.peerId,remoteSessionDescription=_ref8.sessionDescription;connections.current[peerId].setRemoteDescription(new RTCSessionDescription(remoteSessionDescription));// If session descrition is offer then create an answer\nif(!(remoteSessionDescription.type==='offer')){_context5.next=9;break;}connection=connections.current[peerId];_context5.next=6;return connection.createAnswer();case 6:answer=_context5.sent;connection.setLocalDescription(answer);socket.current.emit(ACTIONS.RELAY_SDP,{peerId:peerId,sessionDescription:answer});case 9:case\"end\":return _context5.stop();}}},_callee5);}));return _setRemoteMedia.apply(this,arguments);};setRemoteMedia=function _setRemoteMedia2(_x4){return _setRemoteMedia.apply(this,arguments);};_handleIceCandidate=function _handleIceCandidate3(){_handleIceCandidate=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref7){var peerId,icecandidate;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:peerId=_ref7.peerId,icecandidate=_ref7.icecandidate;if(icecandidate){connections.current[peerId].addIceCandidate(icecandidate);}case 2:case\"end\":return _context4.stop();}}},_callee4);}));return _handleIceCandidate.apply(this,arguments);};handleIceCandidate=function _handleIceCandidate2(_x3){return _handleIceCandidate.apply(this,arguments);};_handleRemovePeer=function _handleRemovePeer3(){_handleRemovePeer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref6){var peerId,userId;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:peerId=_ref6.peerId,userId=_ref6.userId;// Correction: peerID to peerId\nif(connections.current[peerId]){connections.current[peerId].close();}delete connections.current[peerId];delete audioElements.current[peerId];setClients(function(list){return list.filter(function(c){return c.id!==userId;});});case 5:case\"end\":return _context3.stop();}}},_callee3);}));return _handleRemovePeer.apply(this,arguments);};handleRemovePeer=function _handleRemovePeer2(_x2){return _handleRemovePeer.apply(this,arguments);};_handleNewPeer=function _handleNewPeer3(){_handleNewPeer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref5){var peerId,createOffer,remoteUser,offer;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:peerId=_ref5.peerId,createOffer=_ref5.createOffer,remoteUser=_ref5.user;if(!(peerId in connections.current)){_context2.next=3;break;}return _context2.abrupt(\"return\",console.warn(\"You are already connected with \".concat(peerId,\" (\").concat(user.name,\")\")));case 3:// Store it to connections\nconnections.current[peerId]=new RTCPeerConnection({iceServers:freeice()});// Handle new ice candidate on this peer connection\nconnections.current[peerId].onicecandidate=function(event){socket.current.emit(ACTIONS.RELAY_ICE,{peerId:peerId,icecandidate:event.candidate});};// Handle on track event on this connection\nconnections.current[peerId].ontrack=function(_ref9){var _ref9$streams=_slicedToArray(_ref9.streams,1),remoteStream=_ref9$streams[0];addNewClient(_objectSpread(_objectSpread({},remoteUser),{},{muted:true}),function(){// get current users mute info\nvar currentUser=clientsRef.current.find(function(client){return client.id===user.id;});if(currentUser){socket.current.emit(ACTIONS.MUTE_INFO,{userId:user.id,roomId:roomId,isMute:currentUser.muted});}if(audioElements.current[remoteUser.id]){audioElements.current[remoteUser.id].srcObject=remoteStream;}else{var settled=false;var interval=setInterval(function(){if(audioElements.current[remoteUser.id]){audioElements.current[remoteUser.id].srcObject=remoteStream;settled=true;}if(settled){clearInterval(interval);}},300);}});};// Add connection to peer connections track\nlocalMediaStream.current.getTracks().forEach(function(track){connections.current[peerId].addTrack(track,localMediaStream.current);});// Create an offer if required\nif(!createOffer){_context2.next=14;break;}_context2.next=10;return connections.current[peerId].createOffer();case 10:offer=_context2.sent;_context2.next=13;return connections.current[peerId].setLocalDescription(offer);case 13:// send offer to the server\nsocket.current.emit(ACTIONS.RELAY_SDP,{peerId:peerId,sessionDescription:offer});case 14:case\"end\":return _context2.stop();}}},_callee2);}));return _handleNewPeer.apply(this,arguments);};handleNewPeer=function _handleNewPeer2(_x){return _handleNewPeer.apply(this,arguments);};_captureMedia=function _captureMedia3(){_captureMedia=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return navigator.mediaDevices.getUserMedia({audio:true});case 2:localMediaStream.current=_context.sent;case 3:case\"end\":return _context.stop();}}},_callee);}));return _captureMedia.apply(this,arguments);};captureMedia=function _captureMedia2(){return _captureMedia.apply(this,arguments);};socket.current=socketInit();_context7.next=15;return captureMedia();case 15:addNewClient(_objectSpread(_objectSpread({},user),{},{muted:true}),function(){var localElement=audioElements.current[user.id];if(localElement){localElement.volume=0;localElement.srcObject=localMediaStream.current;}});socket.current.on(ACTIONS.MUTE_INFO,function(_ref2){var userId=_ref2.userId,isMute=_ref2.isMute;handleSetMute(isMute,userId);});socket.current.on(ACTIONS.ADD_PEER,handleNewPeer);socket.current.on(ACTIONS.REMOVE_PEER,handleRemovePeer);socket.current.on(ACTIONS.ICE_CANDIDATE,handleIceCandidate);socket.current.on(ACTIONS.SESSION_DESCRIPTION,setRemoteMedia);socket.current.on(ACTIONS.MUTE,function(_ref3){var peerId=_ref3.peerId,userId=_ref3.userId;handleSetMute(true,userId);});socket.current.on(ACTIONS.UNMUTE,function(_ref4){var peerId=_ref4.peerId,userId=_ref4.userId;handleSetMute(false,userId);});socket.current.emit(ACTIONS.JOIN,{roomId:roomId,user:user});case 24:case\"end\":return _context7.stop();}}},_callee7);}));return function initChat(){return _ref.apply(this,arguments);};}();initChat();return function(){localMediaStream.current.getTracks().forEach(function(track){return track.stop();});socket.current.emit(ACTIONS.LEAVE,{roomId:roomId});for(var peerId in connections.current){connections.current[peerId].close();delete connections.current[peerId];delete audioElements.current[peerId];}socket.current.off(ACTIONS.ADD_PEER);socket.current.off(ACTIONS.REMOVE_PEER);socket.current.off(ACTIONS.ICE_CANDIDATE);socket.current.off(ACTIONS.SESSION_DESCRIPTION);socket.current.off(ACTIONS.MUTE);socket.current.off(ACTIONS.UNMUTE);};},[]);var provideRef=function provideRef(instance,userId){audioElements.current[userId]=instance;};var handleMute=function handleMute(isMute,userId){var settled=false;if(userId===user.id){var interval=setInterval(function(){if(localMediaStream.current){localMediaStream.current.getTracks()[0].enabled=!isMute;if(isMute){socket.current.emit(ACTIONS.MUTE,{roomId:roomId,userId:user.id});}else{socket.current.emit(ACTIONS.UNMUTE,{roomId:roomId,userId:user.id});}settled=true;}if(settled){clearInterval(interval);}},200);}};return{clients:clients,provideRef:provideRef,handleMute:handleMute};};","map":{"version":3,"sources":["E:/College Assignment/Sem 6/SDP Project/project/frontend/src/hooks/useWebRTC.js"],"names":["useEffect","useState","useRef","useCallback","ACTIONS","socketInit","freeice","useStateWithCallback","useWebRTC","roomId","user","clients","setClients","audioElements","connections","socket","localMediaStream","clientsRef","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","current","initChat","captureMedia","handleNewPeer","handleRemovePeer","handleIceCandidate","setRemoteMedia","handleSetMute","mute","userId","clientIdx","map","indexOf","allConnectedClients","JSON","parse","stringify","muted","peerId","remoteSessionDescription","sessionDescription","setRemoteDescription","RTCSessionDescription","type","connection","createAnswer","answer","setLocalDescription","emit","RELAY_SDP","icecandidate","addIceCandidate","close","list","filter","c","createOffer","remoteUser","console","warn","name","RTCPeerConnection","iceServers","onicecandidate","event","RELAY_ICE","candidate","ontrack","streams","remoteStream","currentUser","MUTE_INFO","isMute","srcObject","settled","interval","setInterval","clearInterval","getTracks","forEach","track","addTrack","offer","navigator","mediaDevices","getUserMedia","audio","localElement","volume","on","ADD_PEER","REMOVE_PEER","ICE_CANDIDATE","SESSION_DESCRIPTION","MUTE","UNMUTE","JOIN","stop","LEAVE","off","provideRef","instance","handleMute","enabled"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { ACTIONS } from '../actions';\r\nimport socketInit from '../socket';\r\nimport freeice from 'freeice';\r\nimport { useStateWithCallback } from './useStateWithCallback';\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n    const [clients, setClients] = useStateWithCallback([]);\r\n    const audioElements = useRef({});\r\n    const connections = useRef({});\r\n    const socket = useRef(null);\r\n    const localMediaStream = useRef(null);\r\n    const clientsRef = useRef(null);\r\n\r\n    const addNewClient = useCallback(\r\n        (newClient, cb) => {\r\n            const lookingFor = clients.find(\r\n                (client) => client.id === newClient.id\r\n            );\r\n\r\n            if (lookingFor === undefined) {\r\n                setClients(\r\n                    (existingClients) => [...existingClients, newClient],\r\n                    cb\r\n                );\r\n            }\r\n        },\r\n        [clients, setClients]\r\n    );\r\n\r\n    useEffect(() => {\r\n        clientsRef.current = clients;\r\n    }, [clients]);\r\n\r\n    useEffect(() => {\r\n        const initChat = async () => {\r\n            socket.current = socketInit();\r\n            await captureMedia();\r\n            addNewClient({ ...user, muted: true }, () => {\r\n                const localElement = audioElements.current[user.id];\r\n                if (localElement) {\r\n                    localElement.volume = 0;\r\n                    localElement.srcObject = localMediaStream.current;\r\n                }\r\n            });\r\n            socket.current.on(ACTIONS.MUTE_INFO, ({ userId, isMute }) => {\r\n                handleSetMute(isMute, userId);\r\n            });\r\n\r\n            socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\r\n            socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\r\n            socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\r\n            socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\r\n            socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\r\n                handleSetMute(true, userId);\r\n            });\r\n            socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\r\n                handleSetMute(false, userId);\r\n            });\r\n            socket.current.emit(ACTIONS.JOIN, {\r\n                roomId,\r\n                user,\r\n            });\r\n\r\n            async function captureMedia() {\r\n                // Start capturing local audio stream.\r\n                localMediaStream.current =\r\n                    await navigator.mediaDevices.getUserMedia({\r\n                        audio: true,\r\n                    });\r\n            }\r\n            async function handleNewPeer({\r\n                peerId,\r\n                createOffer,\r\n                user: remoteUser,\r\n            }) {\r\n                if (peerId in connections.current) {\r\n                    return console.warn(\r\n                        `You are already connected with ${peerId} (${user.name})`\r\n                    );\r\n                }\r\n\r\n                // Store it to connections\r\n                connections.current[peerId] = new RTCPeerConnection({\r\n                    iceServers: freeice(),\r\n                });\r\n\r\n                // Handle new ice candidate on this peer connection\r\n                connections.current[peerId].onicecandidate = (event) => {\r\n                    socket.current.emit(ACTIONS.RELAY_ICE, {\r\n                        peerId,\r\n                        icecandidate: event.candidate,\r\n                    });\r\n                };\r\n\r\n                // Handle on track event on this connection\r\n                connections.current[peerId].ontrack = ({\r\n                    streams: [remoteStream],\r\n                }) => {\r\n                    addNewClient({ ...remoteUser, muted: true }, () => {\r\n                        // get current users mute info\r\n                        const currentUser = clientsRef.current.find(\r\n                            (client) => client.id === user.id\r\n                        );\r\n                        if (currentUser) {\r\n                            socket.current.emit(ACTIONS.MUTE_INFO, {\r\n                                userId: user.id,\r\n                                roomId,\r\n                                isMute: currentUser.muted,\r\n                            });\r\n                        }\r\n                        if (audioElements.current[remoteUser.id]) {\r\n                            audioElements.current[remoteUser.id].srcObject =\r\n                                remoteStream;\r\n                        } else {\r\n                            let settled = false;\r\n                            const interval = setInterval(() => {\r\n                                if (audioElements.current[remoteUser.id]) {\r\n                                    audioElements.current[\r\n                                        remoteUser.id\r\n                                    ].srcObject = remoteStream;\r\n                                    settled = true;\r\n                                }\r\n\r\n                                if (settled) {\r\n                                    clearInterval(interval);\r\n                                }\r\n                            }, 300);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                // Add connection to peer connections track\r\n                localMediaStream.current.getTracks().forEach((track) => {\r\n                    connections.current[peerId].addTrack(\r\n                        track,\r\n                        localMediaStream.current\r\n                    );\r\n                });\r\n\r\n                // Create an offer if required\r\n                if (createOffer) {\r\n                    const offer = await connections.current[\r\n                        peerId\r\n                    ].createOffer();\r\n\r\n                    // Set as local description\r\n                    await connections.current[peerId].setLocalDescription(\r\n                        offer\r\n                    );\r\n\r\n                    // send offer to the server\r\n                    socket.current.emit(ACTIONS.RELAY_SDP, {\r\n                        peerId,\r\n                        sessionDescription: offer,\r\n                    });\r\n                }\r\n            }\r\n            async function handleRemovePeer({ peerId, userId }) {\r\n                // Correction: peerID to peerId\r\n                if (connections.current[peerId]) {\r\n                    connections.current[peerId].close();\r\n                }\r\n\r\n                delete connections.current[peerId];\r\n                delete audioElements.current[peerId];\r\n                setClients((list) => list.filter((c) => c.id !== userId));\r\n            }\r\n            async function handleIceCandidate({ peerId, icecandidate }) {\r\n                if (icecandidate) {\r\n                    connections.current[peerId].addIceCandidate(icecandidate);\r\n                }\r\n            }\r\n            async function setRemoteMedia({\r\n                peerId,\r\n                sessionDescription: remoteSessionDescription,\r\n            }) {\r\n                connections.current[peerId].setRemoteDescription(\r\n                    new RTCSessionDescription(remoteSessionDescription)\r\n                );\r\n\r\n                // If session descrition is offer then create an answer\r\n                if (remoteSessionDescription.type === 'offer') {\r\n                    const connection = connections.current[peerId];\r\n\r\n                    const answer = await connection.createAnswer();\r\n                    connection.setLocalDescription(answer);\r\n\r\n                    socket.current.emit(ACTIONS.RELAY_SDP, {\r\n                        peerId,\r\n                        sessionDescription: answer,\r\n                    });\r\n                }\r\n            }\r\n            async function handleSetMute(mute, userId) {\r\n                const clientIdx = clientsRef.current\r\n                    .map((client) => client.id)\r\n                    .indexOf(userId);\r\n                const allConnectedClients = JSON.parse(\r\n                    JSON.stringify(clientsRef.current)\r\n                );\r\n                if (clientIdx > -1) {\r\n                    allConnectedClients[clientIdx].muted = mute;\r\n                    setClients(allConnectedClients);\r\n                }\r\n            }\r\n        };\r\n\r\n        initChat();\r\n        return () => {\r\n            localMediaStream.current\r\n                .getTracks()\r\n                .forEach((track) => track.stop());\r\n            socket.current.emit(ACTIONS.LEAVE, { roomId });\r\n            for (let peerId in connections.current) {\r\n                connections.current[peerId].close();\r\n                delete connections.current[peerId];\r\n                delete audioElements.current[peerId];\r\n            }\r\n            socket.current.off(ACTIONS.ADD_PEER);\r\n            socket.current.off(ACTIONS.REMOVE_PEER);\r\n            socket.current.off(ACTIONS.ICE_CANDIDATE);\r\n            socket.current.off(ACTIONS.SESSION_DESCRIPTION);\r\n            socket.current.off(ACTIONS.MUTE);\r\n            socket.current.off(ACTIONS.UNMUTE);\r\n        };\r\n    }, []);\r\n\r\n    const provideRef = (instance, userId) => {\r\n        audioElements.current[userId] = instance;\r\n    };\r\n\r\n    const handleMute = (isMute, userId) => {\r\n        let settled = false;\r\n\r\n        if (userId === user.id) {\r\n            let interval = setInterval(() => {\r\n                if (localMediaStream.current) {\r\n                    localMediaStream.current.getTracks()[0].enabled = !isMute;\r\n                    if (isMute) {\r\n                        socket.current.emit(ACTIONS.MUTE, {\r\n                            roomId,\r\n                            userId: user.id,\r\n                        });\r\n                    } else {\r\n                        socket.current.emit(ACTIONS.UNMUTE, {\r\n                            roomId,\r\n                            userId: user.id,\r\n                        });\r\n                    }\r\n                    settled = true;\r\n                }\r\n                if (settled) {\r\n                    clearInterval(interval);\r\n                }\r\n            }, 200);\r\n        }\r\n    };\r\n\r\n    return {\r\n        clients,\r\n        provideRef,\r\n        handleMute,\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}